Aggregate Functions:
These are used to summarize data.
These functions  will operate only on non null values.if it has a  null value it does not include in them.
MAX()
MIN()
AVG()
SUM()
COUNT()

SELECT MAX(invoices_total)  AS highest,
	MIN(invoices_total)  AS lowest,
	AVG(invoices_total) AS  average,
	SUM(invoices_total *1.1) AS  total,
	 COUNT(invoices_total) AS number_of_invoices ,
	COUNT(payment_date) AS count_of_payments,
	count(*) AS total_records
	COUNT(DISTINCT client_id) AS total_no	 
FROM invoices
WHERE invoice_date > '2019-07-01';

SELECT MAX(payment_date)  AS highest,
	MIN(invoices_total)  AS lowest,
	AVG(invoices_total) AS  average
FROM invoices

exercise on invoices table
data_range              total_sales  total_payments  what_we_expect
first half of 2019   
second half of 2019 
total

SELECT 
'First half of 2019' AS date_range,
SUM(invoice_total)  AS total_sales,
SUM(payment_total) AS total_payments,
SUM(invoice_total - payment_total) AS what_we_expect
FROM  invoices
WHERE invoice_date BETWEEN '2019-01-01' AND '2019-06-30'
UNION 
SELECT 
'Final half of 2019' AS date_range,
SUM(invoice_total)  AS total_sales,
SUM(payment_total) AS total_payments,
SUM(invoice_total - payment_total) AS what_we_expect
FROM  invoices
WHERE invoice_date BETWEEN '2019-07-01' AND '2019-12-31';
UNION 
SELECT 
'Total' AS date_range,
SUM(invoice_total)  AS total_sales,
SUM(payment_total) AS total_payments,
SUM(invoice_total - payment_total) AS what_we_expect
FROM  invoices;


//Group by clause
(Grouping based on only one column)
SELECT 
	client_id,
SUM(invoices_total) AS total_sales
FROM invoices
WHERE invoice_date>='2019-07-01'
GROUP BY client_id
ORDER BY total_sales DESC

//Here we are grouping(using multiple columns) based on state and city
SELECT 
	state,
	city,
SUM(invoices_total) AS total_sales
FROM invoices  i
JOIN clients USING (client_id)
WHERE invoice_date>='2019-07-01'
GROUP BY state,city
ORDER BY total_sales DESC


SELECT
	date,
	
	name AS payment_method,
	
    SUM(amount) AS total_payments

FROM payment_methods pm

JOIN payments p 

ON p.payment_method=pm.payment_method_id

GROUP BY date,payment_method

ORDER BY date

//HAVING CLAUSE
SELECT 
	client_id,

	SUM(invoice_total) AS total_sales,
	
COUNT(*) AS number_of_invoices
	
FROM invoices

-- WHERE total_sales >500

  //Here we don't use where clause because we are not grouped data here.It gives error.It used to filter the data before our rows are grouped 
GROUP BY client_id

HAVING total_sales>500 AND  number_of_invoices>5

//It is used to filter the data after rows are grouped clause but when we use that 
columns that has to be in select 


GET THE CUSTOMERS 
LOCATED IN VIRGINIA
WHO HAVE SPENT MORE THAN 100

1)SELECT 
	customer_id
 FROM customers c
 WHERE state='VA'

2)We have to join the customers and orders using  customer_id , the result can be joined with order_items using order_id
3)Now we have to filter the data  using sales>100

SELECT 
	c.customer_id,

 	   c.first_name,

	    c.last_name,
   
 SUM(oi.quantity* oi.unit_price) AS total_sales

FROM customers c

JOIN orders o USING (customer_id)

JOIN order_items oi USING (order_id)

WHERE state='VA'

GROUP BY c.customer_id,
    
c.first_name,
   
 c.last_name

HAVING  total_sales>100



//ROLLUP OPERATOR:
it summarises the data for each group.It is present in only mysql only

SELECT 
	client_id,
	SUM(invoice_total) AS total_sales
	FROM invoices
	GROUP BY client_id WITH ROLLUP

SELECT 
	state,
	city,
	SUM(invoice_total) AS total_sales
	FROM invoices i
	JOIN clients c USING  (client_id)
	GROUP BY state,city WITH ROLLUP

exercise:
Here we are grouping the data based on payment method .and returning the sum based on each payment_method

SELECT pm.name AS payment_method,
		
SUM(amount) as total
  
 FROM  payment_methods pm
   
JOIN  payments p
   
ON payment_method_id=payment_method
   
GROUP BY name WITH ROLLUP
 //Here we don't use alias name when we are using rollup we have to use actual name
