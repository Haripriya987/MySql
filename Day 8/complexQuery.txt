Subqueries
--find products that are more expennsive than Lettuce
SELECT *
FROM products
WHERE unit_price > (
SELECT unit_price 
FROM products 
WHERE product_id=3
)

//In sql_hr database find employees whose earn more than average
SELECT *
FROM employees
WHERE salary >(
SELECT avg(salary) 
FROM employees
)

//In operator
-- Find the products that have never been ordered
SELECT * 
FROM products
WHERE   product_id   NOT IN(
SELECT DISTINCT product_id
FROM order_items
)

-- find client without invoices
SELECT * 
FROM clients
WHERE  client_id NOT IN
(
SELECT  DISTINCT client_id
FROM invoices
)

--subqueries vs joins
SELECT *
FROM	clients
LEFT JOIN  invoices  USING (client_id)
WHERE    invoice_id    IS NULL

-- find customers who have ordered leetuce(id=3)

SELECT  first_name,
	last_name
FROM customers
WHERE customer_id IN
(
SELECT o.customer_id
FROM   order_items oi
JOIN  orders o USING(order_id )
WHERE product_id=3)

//JOINS
SELECT  distinct customer_id,
	first_name,
	last_name
FROM customers c
JOIN orders o  USING( customer_id)
JOIN order_items  USING( order_id)
WHERE oi.product_id=3

//Using ALL keyword
-- Select invoices larger than all invoices of client 3
SELECT *
FROM invoices
WHERE invoice_total  >(
SELECT MAX(invoice_total)
FROM invoices
WHERE	client_id=3
)

SELECT *
FROM invoices
WHERE invoice_total  > ALL (
SELECT invoice_total
FROM invoices
WHERE	client_id=3
)

//Any keyword:
SELECT *
FROM invoices
WHERE 	invoice_total>SOME(
SELECT client_id
FROM invoices
WHERE	client_id=3
)

--select clients with at least two invoices
SELECT *
FROM clients
WHERE client_id IN(     //it also written as  client_id=ANY
SELECT client_id, count(*)
FROM invoices 
GROUP BY client_id
HAVING count(*) >=2
)


CORRELATED SUBQUERIES
--SELECT EMPLOYEES WHOSE SALARY IS ABOVE THE AVERAGE IN THEIR OFFICE

It is an example for correlated subqueries.For each time it has to execute the avg salry in subquery.Here there is a correlation with outer query .we are referencing with outer query.

CODE:
for each employee
calculate the avg salary for employee.office
return the employee if  salary >avg

SELECT *
FROM employees e
WHERE salary> (
SELECT AVG(salary)
FROM employees
WHERE office_id=e.office_id
)

Get invoices that are larger than the  client's average invoice amount

SELECT *
FROM invoices i
where invoice_total > (
	SELECT AVG(invoice_total)
	FROM invoices
	WHERE client_id=i.client_id
)

//EXISTS OPERATOR
--some clients that have an invoice
SELECT *
FROM clients
WHERE  client_id IN (
SELECT DISTINCT  client_id
FROM invoices
)

//using exists
Here it is like a correlated query.
SELECT *
FROM clients c
WHERE  EXISTS(
SELECT DISTINCT  client_id
FROM invoices
WHERE client_id=c.client_id
)

it is more efficient to use EXISTS.it can be used in situation where subquery does not return a result to outer query.Instead it returns the indication whether it matches that criteria

-- Find the products that have never been  ordered
SELECT *
FROM products p
WHERE NOT EXISTS  // or where product_id NOT IN
(
SELECT product_id
FROM order_items
WHERE product_id=p.product_id
)


//subqueries in select clause:
SELECT 
	invoice_id,
	invoice_total,
	(SELECT AVG(invoice_total)
	FROM invoices) AS invoice_average,
	invoice_total-  (SELECT  invoice_average) AS difference 
FROM   invoices;

SELECT 
	client_id,
	name,
	(SELECT SUM(invoice_total)
	FROM INVOICES
	WHERE client_id=c.client_id)AS total,
	(SELECT AVG(invoice_total)
	FROM invoices) AS invoice_average,
	(SELECT total-invoice_average) AS difference 
FROM   CLIENTS;

//SUB QUERIES IN FROM CLAUSE

SELECT * 
FROM (
SELECT 
	client_id,
	name,
	(SELECT SUM(invoice_total)
	FROM INVOICES
	WHERE client_id=c.client_id)AS total,
	(SELECT AVG(invoice_total)
	FROM invoices) AS invoice_average,
	(SELECT total-invoice_average) AS difference 
FROM   clients c
) AS sales_summary
 WHERE  total IS NOT NULL; 